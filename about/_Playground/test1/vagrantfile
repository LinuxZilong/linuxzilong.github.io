# 将注释掉的代码块删除，以提高可读性。
# 使用更具描述性的变量名称，例如network_mode代替默认网络模式"default_network_mode"。
# 改进逻辑表达式，例如使用"presence"方法而不是字符串empty?方法来检查非空字符串。
# 可以将默认值定义为常量，并将它们放在一个单独的配置块中，这样更易于管理和修改。
# 对于操作系统版本，可以使用判空语法（&.）来避免出现空指针错误。
# 在Guest OS上安装VirtualBox Guest Additions非常有用，因此可以考虑添加一个脚本，以确保所有Guest服务器都安装了它。
# 可以使用.compact方法删除数组中的nil值，而不是使用if语句检查每个变量是否为空。

Vagrant.configure("2") do |config|
    servers = [
      {name: "server1", network: "192.168.56.10:private_network,10.0.0.10:public_network"},
      {name: "server2", os: "ubuntu/lunar64:20230301.0.0", network: "192.168.56.11", cpu: "2", mem: "2048"},
    ]
    # providers = ["virtualbox","vmware_fusion","docker","hyperv","libvirt"]
    default_cpu = "1"
    default_mem = "1024"
    default_network_mode = "private_network"
    default_os = "ubuntu/jammy64"
    
    servers.each do |server|
      config.vm.define server[:name] do |node|
        # if server[:os]
        #   os_name, os_version = server[:os].split(':')
        #   puts "操作系统名称：#{os_name}"
        #   puts "操作系统版本：#{os_version}"
        # else
        #   os_name, os_version = default_os.split(':')
        #   puts "未指定操作系统,使用默认操作系统名称：#{os_name}"
        #   puts "未指定操作系统,使用默认操作系统版本：#{os_version}"          
        # end


        os_name = server[:os]&.split(":")&.[](0) || default_os&.split(":")&.[](0)
        os_version = server[:os]&.split(":")&.[](1) || default_os&.split(":")&.[](1)
        if os_version.to_s.strip != ''
          puts "#{server[:name]} 系统版本： #{os_name}:#{os_version}"
        else
          puts "#{server[:name]} 系统版本： #{os_name}"
        end

        node.vm.box = os_name
        if os_version.to_s.strip != ''
          node.vm.box_version = os_version
        end
        #这里使用了字符串方法strip来删除字符串两端的空格，并且使用不等于操作符!=而不是empty?方法来检查字符串是否为空或nil。这样做可以确保os_version既不为空也不包含只有空格的字符串（例如“ ”）。
        # if defined?(os_version)
        #   puts "变量 name 已定义 "
        # else
        #   puts "变量 name 未定义"
        # end

        if server.key?(:network)
          server[:network].split(",").each do |network|
            ip, network_mode = network.split(':')
            ip.strip!
            network_mode = network_mode&.to_sym || default_network_mode
            puts "#{server[:name]} 系统网络： #{ip} #{network_mode}"
            node.vm.network network_mode, ip: ip
          end
        end
    
        node.vm.provider :virtualbox do |vb|
          vb.memory = server[:mem] || default_mem
          vb.cpus = server[:cpu] || default_cpu
        end
        # providers.each do |provider|
        #   config.vm.provider provider do |v|
        #     v.memory = server[:mem] || default_mem
        #     v.cpus = server[:cpu] || default_cpu
        #   end
        # end
      end
    end
end
