require 'uri'
require 'open-uri'
require 'yaml'
config = YAML.load_file(File.join(File.dirname(__FILE__), 'config.yaml'))
servers = config['servers']
default_config = config['default_config']

# puts servers.to_yaml
# puts default_config.to_yaml


Vagrant.configure("2") do |config|

config.vm.boot_timeout = 360
# vb.gui = true


default_region = default_config['default_region']
# default_cpu = default_config['default_cpu']
# default_mem = default_config['default_mem']
default_network_mode = default_config['default_network_mode']
default_os = default_config['default_os']

# puts default_region
# puts default_cpu
# puts default_mem
# puts default_network_mode
# puts default_os

yaml_default_synced_folder = default_config['default_synced_folder']
# owner = default_synced_folder['owner']
# owner = default_config['default_synced_folder']['owner']
# puts owner

# # 挂载选项
default_synced_folder = {
  create: yaml_default_synced_folder['create'],
  owner: yaml_default_synced_folder['owner'],
  group: yaml_default_synced_folder['group'],
  mount_options: yaml_default_synced_folder['mount_options'],
  type: yaml_default_synced_folder['type']
  # virtualbox、NFS 或 rsync
}
# puts default_synced_folder

# # 设置启动顺序
boot_order = default_config['boot_order']
# puts boot_order
# ## 自定义密钥
# ssh_pub_keys = [
#   # 从本地文件中获取公钥
#   File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip,
#   # 从远程地址获取 vagrant 公钥
#   URI.open('https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub').read.strip,
#   # 自定义公钥
#   "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICuTis0fYCI4SkLURxHhxxHrSq1ahq9MpvswhzII9w9b ubuntu_vagrant_insecure_key"
# ]

# puts "多机"
# puts servers.to_yaml

servers.each do |server|
  # puts server['cpu']
  # puts "单机"
  # puts server.to_yaml


  config.vm.define server['name'] do |node|
    node.vm.box = default_os

    ## 设置 provider 规格
    node.vm.provider "virtualbox" do |vb|
      vb.memory = server[:mem] || default_config['default_mem']
      vb.cpus = server[:cpu] || default_config['default_cpu']
    end

    ## 设置系统版本
    os_name = server['os']&.split(":")&.[](0) || default_os&.split(":")&.[](0)
    os_version = server['os']&.split(":")&.[](1) || default_os&.split(":")&.[](1)
    puts "#{server[:name]} 系统版本: #{os_name}#{":#{os_version}" if os_version.to_s.strip != ''}"
    node.vm.box = os_name
    node.vm.box_version = os_version.to_s.strip != '' ? os_version : nil
           
    ## 设置主机名
    host_region = server['region']&.split || [default_region]
    host_name = "#{server['name']}.#{host_region.join}"
    puts "#{server[:name]} 主机名: #{host_name}"
    node.vm.hostname = host_name

    ## 设置网络
    # server['network']&.split(",")&.each do |network|
    server['network']&.each do |network|
      ip, network_mode = network.split(':').map(&:strip)
      network_mode = (network_mode&.to_sym || default_network_mode)
      puts "#{server['name']} 系统网络:  #{ip} #{network_mode}"
      node.vm.network network_mode, ip: ip, virtualbox__intnet: false, auto_config: true
    end
    ## 端口转发
    server['port_forward']&.each do |forward|
      host_port, guest_port, id = forward.split(':').map(&:strip)
      puts "#{server['name']} 端口映射:  host_port: #{host_port} guest_port: #{guest_port} #{"id: #{id}" if id.to_s.strip != ''}"
      node.vm.network "forwarded_port", host: host_port, guest: guest_port, id: id, auto_correct: true
    end    
    ## 共享目录
    server[:mount]&.each do |mount|
      mount_point, mount_path = mount.split(':').map(&:strip)
      puts "#{server[:name]} 挂载目录:  #{mount_point} -> #{mount_path}"
      node.vm.synced_folder mount_point, mount_path, default_synced_folder
    end 

    ## 挂载磁盘
    server[:disk]&.each do |disk|
      name, size, primary = disk.split(':').map(&:strip)
      puts "#{server[:name]} 挂载磁盘:  #{name} #{size} #{primary ? 'primary' : '' if primary}"
      node.vm.disk :disk, name: name, size: size, primary: !!primary && true
    end

    ## 挂载 DVD 镜像
    server[:dvd]&.each do |dvd|
      name, file = dvd.split(':').map(&:strip)
      puts "#{server[:name]} 挂载dvd:  #{name} #{file}"
      node.vm.disk :dvd, name: name, file: file
    end
    
    # 设置启动顺序
    node.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--boot1", default_config['boot_order'][0]]
      vb.customize ["modifyvm", :id, "--boot2", default_config['boot_order'][1]]
      vb.customize ["modifyvm", :id, "--boot3", default_config['boot_order'][2]]
    end

    ## 自定义密钥








    # ssh_pub_keys = [
    #   # 从本地文件中获取公钥
    #   File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip,
    #   # 从远程地址获取 vagrant 公钥
    #   URI.open('https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub').read.strip,
    #   # 自定义公钥
    #   "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICuTis0fYCI4SkLURxHhxxHrSq1ahq9MpvswhzII9w9b ubuntu_vagrant_insecure_key"
    # ]
    ssh_pub_keys = []

    KEY_HANDLERS = {
      'remote_key' => ->(keys) { keys.each { |key| ssh_pub_keys << URI.open(key).read.strip } },
      'local_key' => ->(keys) { keys.each { |key| ssh_pub_keys << File.readlines(key).first.strip } },
      'content_key' => ->(keys) { ssh_pub_keys += keys }
    }

    default_config['ssh_pub_keys']&.each do |key_type, keys|
      # 这段代码使用了Safe Navigation（&.）操作符。Safe Navigation（&.）操作符是在Ruby 2.3中引入的一种新操作符，用于安全地访问可能为nil的对象的属性或方法。如果对象为nil，则表达式将返回nil，而不是引发NoMethodError异常。
      # 在这个例子中，default_config['ssh_pub_keys']对象可能为nil。因此，如果我们尝试对nil对象调用each方法，将会引发NoMethodError异常，导致代码崩溃。为了避免这种情况，我们在对象后面使用了&.操作符，表示只有在对象不为nil时才会执行后续的方法调用。因此，如果default_config['ssh_pub_keys']为nil，则整个表达式将返回nil，不会执行后续的代码。
      # 如果default_config['ssh_pub_keys']不为nil，则会执行后续的方法调用。each方法用于遍历对象的每个元素，其中key_type和keys是每个元素的键和值，分别表示密钥类型和密钥列表。在这个代码块中，我们使用each方法遍历default_config['ssh_pub_keys']中的每个密钥类型，并为每个密钥类型执行相应的处理方法。
      handlers = KEY_HANDLERS[key_type]
      handlers&.each { |handler| handler&.(keys) }
    end


    
    node.vm.provision "shell", name: "Add Pub_Keys...", inline: <<-SHELL
      echo "#{ssh_pub_keys.join("\n")}" >> /home/vagrant/.ssh/authorized_keys
    SHELL

#     首先，我们定义了一个空数组ssh_pub_keys，用于存储所有要添加到authorized_keys文件中的公钥。
# 然后，我们定义了一个Hash表KEY_HANDLERS，其中包含了每个密钥类型对应的处理方法。在这个示例中，我们支持三种密钥类型，即remote_key，local_key和content_key。对于每个密钥类型，我们定义了一个Lambda表达式，用于处理该密钥类型的公钥。例如，对于remote_key类型的密钥，我们使用URI.open方法打开远程密钥文件，并将其中的公钥添加到ssh_pub_keys数组中。对于local_key类型的密钥，我们从本地文件中读取公钥，并将其添加到ssh_pub_keys数组中。对于content_key类型的密钥，我们直接将公钥内容添加到ssh_pub_keys数组中。
# 接下来，我们使用yaml_config['ssh_pub_keys']&.each方法遍历yaml配置文件中ssh_pub_keys的每个元素。在这个代码块中，key_type表示密钥类型（例如remote_key，local_key或content_key），而keys表示该密钥类型的公钥列表。我们使用KEY_HANDLERS[key_type]方法获取与该密钥类型对应的处理程序数组。然后，我们使用handlers&.each方法遍历该数组中的每个处理程序，并使用handler&.(keys)方法调用每个处理程序来处理该密钥类型的所有公钥。如果该密钥类型没有对应的处理程序，则不会执行任何操作。
# 最后，我们使用Vagrant的node.vm.provision方法在虚拟机中运行一个shell脚本。该脚本将


# 脚本定义了一个名为 ssh_pub_keys 的空列表，以及一个名为 KEY_HANDLERS 的字典，它将不同类型的公钥（在 YAML 文件中指定）与处理它们的函数相关联。
# 脚本循环遍历 YAML 文件中的每种密钥类型，并对于每种类型，它从 KEY_HANDLERS 中获取相应的处理程序函数，并将其应用于该类型的密钥列表。
# 最后，脚本执行一个 shell 命令，将收集到的所有公钥附加到 Vagrant 虚拟机的 authorized_keys 文件中。



#     # 设置hosts
#     hosts_str = ""
#     servers.each do |server|
#       server[:network]&.split(",")&.each do |network|
#         ip_address, _ = network.split(":")
#         host_region_local = server[:region]&.split || [default_region]
#         host_name_local = "#{server[:name]}"
#         host_name_full_local = "#{server[:name]}.#{host_region_local.join}"
#         hosts_str += "#{ip_address}\t#{host_name_local}\t#{host_name_full_local}\n"
#       end
#     end
#     puts "---------------------Hosts---------------------"
#     puts "#{hosts_str}"
#     node.vm.provision "shell", name: "Add Hosts...", inline: "echo '#{hosts_str}' >> /etc/hosts", privileged: true, run: "once"
#     # 删除 以127开头且不以localhost结尾的行
#     node.vm.provision "shell", 
#     inline: "sudo sed -i  '/^[^#].*localhost$/!{/^127/d}' /etc/hosts", 
#     privileged: true

#     ## shell
#     server[:provision_shell]&.split(',')&.each do |script|
#       script, *args = script.split(':')
#       puts "#{server[:name]} Shell脚本: #{script} 参数: #{args.join(' ')}"
#       node.vm.provision "shell", name: "Run shell script...", path: script, args: args.join(' ')
#     end

#     ## ansible
#     # node.vm.provision "ansible" do |ansible|
#     #   ansible.playbook = "playbook.yml"
#     # end
  end
end





end


# {
#   "servers" => [
#     {
#       "name" => "server1",
#       "os" => "ubuntu/lunar64:20230301.0.0",
#       "cpu" => 2,
#       "mem" => 2048,
#       "region" => "dev",
#       "provision_shell" => [
#           "bootstrap.sh:arg1 arg2 arg3",
#           "bootstrap2.sh"
#       ],
#       "network" => [
#           "192.168.56.10:private_network",
#           "192.168.63.20:public_network"
#       ],
#       "port_forward" => [
#           "8121:22:ssh",
#           "8980:80:name"
#       ],
#       "mount" => [
#           "./sharedir1:/vagrant1",
#           "./sharedir2:/vagrant2"
#       ],
#       "disk" => [
#           "disk1:100GB:primary",
#           "disk2:10GB"
#       ],
#       "dvd" => [
#           "dvd1:/home/admin/Storage/6.ISO/WePE64_V2.2.iso"
#       ]
#     }, 
#     {
#       "name" => "server2",
#       "port_forward" => [
#           "8122:22:ssh"
#       ]
#     }
#   ],
#   "default_config" => [
#           {"default_region" => "local"}, 
#           {"default_cpu" => 1}, 
#           {"default_mem" => 1024}, 
#           {"default_network_mode" => "private_network"}, 
#           {"default_os" => "ubuntu/jammy64"}, 
#           {"default_synced_folder" => [
#             {"create" => true }, 
#             {"owner" => "vagrant"}, 
#             {"group" => "vagrant"}, 
#             {"mount_options" => "[\"dmode=755\", \"fmode=644\"]"}, 
#             {"type" => "virtualbox"}
#           ]}, 
#           {"boot_order" => "[\"disk\", \"dvd\", \"none\"]"}, 
#           {"ssh_pub_keys" => {
#               "remote_key" => [
#                   "https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub"
#               ],
#               "local_key" => [
#                   "\#{Dir.home}/.ssh/id_rsa.pub",
#                   "/root/.ssh/id_rsa.pub"
#               ],
#               "content_key" => [
#                   "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICuTis0fYCI4SkLURxHhxxHrSq1ahq9MpvswhzII9w9b ubuntu_vagrant_insecure_key"
#               ]
#             }
#           }
#   ]
# }